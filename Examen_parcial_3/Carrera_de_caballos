import random

# Representación de las cartas con emoticones
PALOS = {"oros": "🟡", "copas": "🏆", "espadas": "⚔️", "bastos": "🪵"}

# Configuración de la carrera
PISTA_LONGITUD = 10  # Longitud de la pista
CABALLOS = {palo: 0 for palo in PALOS}  # Posiciones iniciales

# Baraja de cartas
BARAJA = [palo for palo in PALOS for _ in range(10)]
random.shuffle(BARAJA)

# Función para mostrar la pista

def mostrar_pista():
    print("\nPista de la carrera:")
    print("META  |" + "—" * (PISTA_LONGITUD * 2) + "| META")
    for palo, posicion in CABALLOS.items():
        print(f"{PALOS[palo]}: " + "  " * posicion + "🐴")
    print("Cartas de la pista: ", " | ".join(PALOS[palo] for palo in BARJA[:PISTA_LONGITUD]))

# Función principal de la carrera
def carrera():
    while max(CABALLOS.values()) < PISTA_LONGITUD:
        input("Presiona Enter para voltear una carta...")
        carta = BARAJA.pop()
        print(f"Salió la carta: {PALOS[carta]}")
        
        # Retrocede el caballo si corresponde
        if CABALLOS[carta] > 0:
            CABALLOS[carta] -= 1
        
        # Mostrar la pista actualizada
        mostrar_pista()
        
        # Verificar si todos cruzaron una carta y mostrar retroceso
        if all(pos >= PISTA_LONGITUD // 2 for pos in CABALLOS.values()):
            carta_retroceso = random.choice(list(PALOS.keys()))
            print(f"Todos han cruzado la mitad, se voltea {PALOS[carta_retroceso]} para retroceso!")
            if CABALLOS[carta_retroceso] > 0:
                CABALLOS[carta_retroceso] -= 1
            mostrar_pista()

    print("¡La carrera ha terminado!")

# Iniciar la carrera
carrera()
